=== ReadBuddy\App.xaml ===
ï»¿<Application x:Class="ReadBuddy.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
</Application>


=== ReadBuddy\App.xaml.cs ===
ï»¿using Microsoft.Extensions.DependencyInjection;
using System.Windows;
using ReadBuddy.Services;
using ReadBuddy.ViewModels;
using ReadBuddy.Views;

namespace ReadBuddy
{
    public partial class App : Application
    {
        public static IServiceProvider ServiceProvider { get; private set; }

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            var services = new ServiceCollection();

            // ðŸ”§ Register services
            services.AddSingleton<IAuthService, Auth0Service>();
            services.AddSingleton<IUserSessionService, UserSessionService>();


            // ðŸ”§ Register view models
            services.AddTransient<WelcomeViewModel>();

            // ðŸ”§ Register views
            services.AddTransient<WelcomeView>();
            services.AddTransient<UserInfoView>();

            ServiceProvider = services.BuildServiceProvider();

            // ðŸªŸ Show WelcomeView
            var welcomeWindow = ServiceProvider.GetRequiredService<WelcomeView>();
            welcomeWindow.Show();
        }
    }
}


=== ReadBuddy\AssemblyInfo.cs ===
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]


=== ReadBuddy\Models\just a claaa in this folder.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadBuddy.Models
{
    internal class just_a_claaa_in_this_folder
    {
    }
}


=== ReadBuddy\Resources\amazing awsom claass to just have the folder.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadBuddy.Resources
{
    internal class amazing_awsom_claass_to_just_have_the_folder
    {
    }
}


=== ReadBuddy\Services\Auth0Service.cs ===
ï»¿using Auth0.OidcClient;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Security.Claims;
using System.Text.Json;

namespace ReadBuddy.Services
{
    public class Auth0Service : IAuthService
    {
        private readonly Auth0Client _auth0Client;

        public Auth0Service()
        {
            var domain = ConfigurationManager.AppSettings["Auth0:Domain"];
            var clientId = ConfigurationManager.AppSettings["Auth0:ClientId"];

            if (string.IsNullOrWhiteSpace(domain) || string.IsNullOrWhiteSpace(clientId))
                throw new InvalidOperationException("Auth0:Domain or ClientId is missing in App.config");

            _auth0Client = new Auth0Client(new Auth0ClientOptions
            {
                Domain = domain,
                ClientId = clientId,
                Scope = "openid profile email",
                Browser = new WebViewBrowser()
            });
        }

        public async Task<(bool IsSuccess, ClaimsPrincipal? User, string? ErrorMessage)> LoginAsync()
        {
            try
            {
                var loginResult = await _auth0Client.LoginAsync(/*new Dictionary<string, string>
                {
                    { "prompt", "login" } // Force login screen every time
                }*/);


                if (loginResult.IsError)
                    return (false, null, loginResult.Error);


                return (true, loginResult.User, null);
            }
            catch (Exception ex)
            {
                return (false, null, ex.Message);
            }
        }

        //public async Task<bool> IsTokenValidAsync()
        //{
        //    try
        //    {
        //        // Always return false since we are not remembering tokens
        //        return false;
        //    }
        //    catch
        //    {
        //        return false;
        //    }
        //}

        public async Task LogoutAsync()
        {
            await _auth0Client.LogoutAsync();
        }
    }
}


=== ReadBuddy\Services\IAuthService.cs ===
ï»¿using System.Security.Claims;
using System.Threading.Tasks;

namespace ReadBuddy.Services;

public interface IAuthService
{
    Task<(bool IsSuccess, ClaimsPrincipal? User, string? ErrorMessage)> LoginAsync();
    //Task<bool> IsTokenValidAsync();


    Task LogoutAsync();


}


=== ReadBuddy\Services\IUserSessionService.cs ===
ï»¿using System.Security.Claims;

public interface IUserSessionService
{
    ClaimsPrincipal? CurrentUser { get; }
    void SetUser(ClaimsPrincipal user);
}


=== ReadBuddy\Services\UserSessionService.cs ===
ï»¿using System.Security.Claims;

public class UserSessionService : IUserSessionService
{
    public ClaimsPrincipal? CurrentUser { get; private set; }

    public void SetUser(ClaimsPrincipal user)
    {
        CurrentUser = user;
    }
}


=== ReadBuddy\ViewModels\HomeViewModel.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadBuddy.ViewModels
{
    internal class HomeViewModel
    {
    }
}


=== ReadBuddy\ViewModels\MainViewModel.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ReadBuddy.ViewModels
{
    internal class MainViewModel
    {
    }
}


=== ReadBuddy\ViewModels\WelcomeViewModel.cs ===
ï»¿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using ReadBuddy.Services;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.Extensions.DependencyInjection;

namespace ReadBuddy.ViewModels;

public partial class WelcomeViewModel : ObservableObject
{
    private readonly IAuthService _authService;
    private readonly IUserSessionService _userSessionService;

    public WelcomeViewModel(IAuthService authService, IUserSessionService userSessionService)
    {
        _authService = authService;
        _userSessionService = userSessionService;
    }

    [ObservableProperty]
    private bool isLoading = true;

    [RelayCommand]
    public async Task InitializeAsync()
    {
        IsLoading = true;

        var (success, user, error) = await _authService.LoginAsync();

        if (success && user != null)
        {
            _userSessionService.SetUser(user);
            OpenUserInfoWindow();
        }
        else
        {
            var result = MessageBox.Show(
                $"Login failed.\n\n{error ?? "Unknown error"}\n\nTry again?",
                "Login Error",
                MessageBoxButton.YesNo,
                MessageBoxImage.Error);

            if (result == MessageBoxResult.Yes)
            {
                await InitializeAsync(); // Retry
            }
            else
            {
                Application.Current.Shutdown();
            }
        }

        IsLoading = false;
    }

    private void OpenUserInfoWindow()
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            var userInfoWindow = App.ServiceProvider.GetRequiredService<Views.UserInfoView>();
            userInfoWindow.Show();

            // Close the welcome view
            Application.Current.Windows
                .OfType<Window>()
                .FirstOrDefault(w => w.DataContext == this)
                ?.Close();
        });
    }
}


=== ReadBuddy\Views\HomeView.xaml ===
ï»¿<UserControl x:Class="ReadBuddy.Views.HomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ReadBuddy.Views"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
            
    </Grid>
</UserControl>


=== ReadBuddy\Views\HomeView.xaml.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace ReadBuddy.Views
{
    /// <summary>
    /// Interaction logic for HomeView.xaml
    /// </summary>
    public partial class HomeView : UserControl
    {
        public HomeView()
        {
            InitializeComponent();
        }
    }
}


=== ReadBuddy\Views\MainWindow.xaml ===
ï»¿<Window x:Class="ReadBuddy.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ReadBuddy"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>

    </Grid>
</Window>


=== ReadBuddy\Views\MainWindow.xaml.cs ===
ï»¿using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace ReadBuddy
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }


    }
}

=== ReadBuddy\Views\UserInfoView.xaml ===
ï»¿<Window x:Class="ReadBuddy.Views.UserInfoView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Welcome"
        Height="300" Width="400"
        WindowStartupLocation="CenterScreen">
    <Grid Margin="20">
        <StackPanel>
            <TextBlock Text="Welcome!" FontSize="20" FontWeight="Bold" Margin="0 0 0 20"/>
            <TextBlock x:Name="NameTextBlock" FontSize="16"/>
            <TextBlock x:Name="EmailTextBlock" FontSize="16" Margin="0 10 0 20"/>
            <Button Content="Logout" Width="100" Click="Logout_Click" HorizontalAlignment="Left"/>
        </StackPanel>
    </Grid>
</Window>


=== ReadBuddy\Views\UserInfoView.xaml.cs ===
ï»¿using System.Security.Claims;
using System.Windows;
using ReadBuddy.Services;

namespace ReadBuddy.Views
{
    public partial class UserInfoView : Window
    {
        private readonly IAuthService _authService;

        public UserInfoView(IUserSessionService session, IAuthService authService)
        {
            InitializeComponent();

            _authService = authService;

            var user = session.CurrentUser;
            var name = user?.FindFirst("name")?.Value ?? "(no name)";
            var email = user?.FindFirst("email")?.Value ?? "(no email)";

            NameTextBlock.Text = $"Name: {name}";
            EmailTextBlock.Text = $"Email: {email}";
        }

        private async void Logout_Click(object sender, RoutedEventArgs e)
        {
            await _authService.LogoutAsync();
            Application.Current.Shutdown();
        }


    }
}


=== ReadBuddy\Views\WelcomeView.xaml ===
ï»¿<Window x:Class="ReadBuddy.Views.WelcomeView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Welcome" Height="300" Width="400"
        WindowStartupLocation="CenterScreen"
        Loaded="Window_Loaded">

    <Grid>
        <TextBlock Text="Initializing login..." 
                   FontSize="18" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
    </Grid>
</Window>


=== ReadBuddy\Views\WelcomeView.xaml.cs ===
ï»¿using System.Windows;
using ReadBuddy.ViewModels;

namespace ReadBuddy.Views;

public partial class WelcomeView : Window
{
    public WelcomeView(WelcomeViewModel viewModel)
    {
        InitializeComponent();
        DataContext = viewModel;
    }

    private async void Window_Loaded(object sender, RoutedEventArgs e)
    {
        if (DataContext is WelcomeViewModel vm)
            await vm.InitializeAsync();
    }
}


=== ReadBuddy\Views\Controls\UploadControl.xaml ===
ï»¿<UserControl x:Class="ReadBuddy.Views.Controls.UploadControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ReadBuddy.Views.Controls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
            
    </Grid>
</UserControl>


=== ReadBuddy\Views\Controls\UploadControl.xaml.cs ===
ï»¿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace ReadBuddy.Views.Controls
{
    /// <summary>
    /// Interaction logic for UploadControl.xaml
    /// </summary>
    public partial class UploadControl : UserControl
    {
        public UploadControl()
        {
            InitializeComponent();
        }
    }
}


